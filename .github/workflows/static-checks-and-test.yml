name: Test workflow
on:
  push:
  pull_request: {}

permissions:
  actions: write
  checks: write
  contents: write
  packages: write

jobs:
  static-checks:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repo
      uses: actions/checkout@v3
    - name: Set up python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: build environment
      run: make requirements
    - name: check black
      if: always()
      run: make check-black
    - name: check isort
      if: always()
      run: make check-isort
    - name: check flake8
      if: always()
      run: make check-flake8
    - name: check bandit
      if: always()
      run: make check-bandit
    - name: check mllint
      if: always()
      run: make check-mllint
    - name: Publish mllint report to actions page
      uses: LouisBrunner/checks-action@v1.2.0
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: MLLint report
        conclusion: ${{ job.status }}
        output: "{\"summary\":\"mllint report\"}"
        output_text_description_file: reports/mllint_report.md

  test:
    needs: static-checks
    runs-on: ubuntu-latest
    steps:
      - name: Test with pytest
        run: |
          make test

  build:
    needs: [static-checks, test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION='0.0.1-test'
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: Login to registry
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push
        run: |
          IMG=ghcr.io/${REPO}
          docker build \
            -t ${IMG}:latest \
            -t ${IMG}:${{ env.version_major }}-latest \
            -t ${IMG}:${{ env.version_major }}.${{ env.version_minor }}-latest \
            -t ${IMG}:${{ env.version }} \
            .
          docker push --all-tags $IMG